{"version":3,"sources":["components/ImagePicker.tsx","pages/NewMemory.tsx"],"names":["Camera","Plugins","ImagePicker","props","useState","takenPhoto","setTakenPhoto","filePickerRef","useRef","openFilePicker","current","click","takePhotoHandler","a","Capacitor","isPluginAvailable","getPhoto","resultType","CameraResultType","Uri","source","CameraSource","quality","width","photo","webPath","pickedPhoto","path","preview","onImagePick","Fragment","className","src","alt","fill","onClick","icon","camera","slot","type","hidden","ref","onChange","event","file","target","files","fr","FileReader","onload","undefined","result","toString","readAsDataURL","Filesystem","NewMemory","chosenMemoryType","setChosenMemoryType","memoriesCtx","useContext","MemoriesContext","titleRef","history","useHistory","addMemoryHandler","enteredTitle","value","trim","length","addMemory","goBack","replace","defaultHref","position","onIonChange","selectedMemoryType","detail"],"mappings":"2OAYQA,G,OAAWC,IAAXD,QA0EOE,EAtEV,SAACC,GAAW,IAAD,EACsBC,qBADtB,mBACPC,EADO,KACKC,EADL,KAGRC,EAAgBC,iBAAyB,MAEzCC,EAAiB,WACrBF,EAAcG,QAASC,SAiBnBC,EAAgB,uCAAG,8BAAAC,EAAA,yDAClBC,IAAUC,kBAAkB,UADV,uBAErBN,IAFqB,mDAMDT,EAAOgB,SAAS,CAClCC,WAAYC,IAAiBC,IAC7BC,OAAQC,IAAarB,OACrBsB,QAAS,GACTC,MAAO,MAVY,WAMfC,EANe,SAaNA,EAAMC,QAbA,iDAgBfC,EAAqB,CACzBC,KAAMH,EAAMG,KACZC,QAASJ,EAAMC,SAEjBnB,EAAcoB,GACdvB,EAAM0B,YAAYH,GArBG,kDAuBrBjB,IAvBqB,0DAAH,qDA2BtB,OACE,kBAAC,IAAMqB,SAAP,KACE,yBAAKC,UAAU,kBACX1B,GAAc,gDACfA,GAAc,yBAAK2B,IAAK3B,EAAWuB,QAASK,IAAI,aAEnD,kBAAC,IAAD,CAAWC,KAAK,QAAQC,QAASvB,GAC/B,kBAAC,IAAD,CAASwB,KAAMC,IAAQC,KAAK,UAC5B,kBAAC,IAAD,oBAEF,2BACEC,KAAK,OACLC,QAAM,EACNC,IAAKlC,EACLmC,SAvDkB,SAACC,GACvB,IAAMC,EAAOD,EAAME,OAAQC,MAAO,GAC5BC,EAAK,IAAIC,WACfD,EAAGE,OAAS,WACV,IAAMzB,EAAQ,CACZG,UAAMuB,EACNtB,QAASmB,EAAGI,OAAQC,YAEtB9C,EAAckB,GACdrB,EAAM0B,YAAYL,IAEpBuB,EAAGM,cAAcT,QCVE3C,IAAfqD,WA4FOC,UA1Fa,WAAO,IAAD,EACInD,qBADJ,mBACzBC,EADyB,KACbC,EADa,OAEgBF,mBAC9C,QAH8B,mBAEzBoD,EAFyB,KAEPC,EAFO,KAM1BC,EAAcC,qBAAWC,KAEzBC,EAAWrD,iBAA4B,MAEvCsD,EAAUC,cAWVC,EAAgB,uCAAG,8BAAAnD,EAAA,0DACjBoD,EADiB,UACFJ,EAASnD,eADP,aACF,EAAkBwD,QAIK,IAA1CD,EAAab,WAAWe,OAAOC,QAC9B/D,GACAmD,EAPoB,iDAcvBE,EAAYW,UACVhE,EACA4D,EAAab,WACbI,GAEFM,EAAQM,OAAS,EAAIN,EAAQQ,SAAWR,EAAQS,QAAQ,kBAnBjC,2CAAH,qDAsBtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYjC,KAAK,SACf,kBAAC,IAAD,CAAekC,YAAY,oBAE7B,kBAAC,IAAD,yBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,SAAS,YAAnB,gBACA,kBAAC,IAAD,CAAUlC,KAAK,OAAOE,IAAKoB,OAIjC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEa,YAlDkB,SAAC/B,GAC/B,IAAMgC,EAAqBhC,EAAMiC,OAAOV,MACxCT,EAAoBkB,IAiDRT,MAAOV,GAEP,kBAAC,IAAD,CAAiBU,MAAM,QAAvB,eACA,kBAAC,IAAD,CAAiBA,MAAM,OAAvB,iBAIN,kBAAC,IAAD,CAAQnC,UAAU,mBAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAaF,YAhEA,SAACL,GACxBlB,EAAckB,QAkER,kBAAC,IAAD,CAAQO,UAAU,kBAChB,kBAAC,IAAD,CAAQA,UAAU,mBAChB,kBAAC,IAAD,CAAWI,QAAS6B,GAApB","file":"static/js/11.ef9b7cd2.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { IonButton, IonIcon, IonLabel } from \"@ionic/react\";\nimport { camera } from \"ionicons/icons\";\nimport {\n  Plugins,\n  CameraResultType,\n  CameraSource,\n  Capacitor,\n} from \"@capacitor/core\";\n\nimport \"./ImagePicker.css\";\n\nconst { Camera } = Plugins;\nexport interface Photo { path: string | undefined; preview: string }\nconst ImagePicker: React.FC<{\n  onImagePick: (photo: Photo) => void;\n}> = (props) => {\n  const [takenPhoto, setTakenPhoto] = useState<Photo>();\n\n  const filePickerRef = useRef<HTMLInputElement>(null);\n\n  const openFilePicker = () => {\n    filePickerRef.current!.click();\n  };\n\n  const pickFileHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target!.files![0];\n    const fr = new FileReader();\n    fr.onload = () => {\n      const photo = {\n        path: undefined,\n        preview: fr.result!.toString(),\n      };\n      setTakenPhoto(photo);\n      props.onImagePick(photo);\n    };\n    fr.readAsDataURL(file);\n  };\n\n  const takePhotoHandler = async () => {\n    if (!Capacitor.isPluginAvailable(\"Camera\")) {\n      openFilePicker();\n      return;\n    }\n    try {\n      const photo = await Camera.getPhoto({\n        resultType: CameraResultType.Uri,\n        source: CameraSource.Camera,\n        quality: 80,\n        width: 500,\n      });\n\n      if (!photo || !photo.webPath) {\n        return;\n      }\n      const pickedPhoto: Photo = {\n        path: photo.path,\n        preview: photo.webPath,\n      };\n      setTakenPhoto(pickedPhoto);\n      props.onImagePick(pickedPhoto);\n    } catch (error) {\n      openFilePicker();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"image-preview\">\n        {!takenPhoto && <h3>No photo chosen.</h3>}\n        {takenPhoto && <img src={takenPhoto.preview} alt=\"Preview\" />}\n      </div>\n      <IonButton fill=\"clear\" onClick={takePhotoHandler}>\n        <IonIcon icon={camera} slot=\"start\"></IonIcon>\n        <IonLabel>Take Photo</IonLabel>\n      </IonButton>\n      <input\n        type=\"file\"\n        hidden\n        ref={filePickerRef}\n        onChange={pickFileHandler}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default ImagePicker;\n","import React, { useState, useRef, useContext } from \"react\";\nimport {\n  IonPage,\n  IonHeader,\n  IonToolbar,\n  IonTitle,\n  IonContent,\n  IonButtons,\n  IonBackButton,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonItem,\n  IonLabel,\n  IonInput,\n  IonButton,\n  IonSelect,\n  IonSelectOption,\n} from \"@ionic/react\";\nimport { Plugins, FilesystemDirectory } from \"@capacitor/core\";\nimport { base64FromPath } from \"@ionic/react-hooks/filesystem\";\nimport { useHistory } from \"react-router-dom\";\n\nimport MemoriesContext from \"../data/memories-context\";\nimport ImagePicker, { Photo } from \"../components/ImagePicker\";\n\nconst { Filesystem } = Plugins;\n\nconst NewMemory: React.FC = () => {\n  const [takenPhoto, setTakenPhoto] = useState<Photo>();\n  const [chosenMemoryType, setChosenMemoryType] = useState<\"good\" | \"bad\">(\n    \"good\"\n  );\n\n  const memoriesCtx = useContext(MemoriesContext);\n\n  const titleRef = useRef<HTMLIonInputElement>(null);\n\n  const history = useHistory();\n\n  const photoPickHandler = (photo: Photo) => {\n    setTakenPhoto(photo);\n  };\n\n  const selectMemoryTypeHandler = (event: CustomEvent) => {\n    const selectedMemoryType = event.detail.value;\n    setChosenMemoryType(selectedMemoryType);\n  };\n\n  const addMemoryHandler = async () => {\n    const enteredTitle = titleRef.current?.value;\n\n    if (\n      !enteredTitle ||\n      enteredTitle.toString().trim().length === 0 ||\n      !takenPhoto ||\n      !chosenMemoryType\n    ) {\n      return;\n    }\n\n    \n\n    memoriesCtx.addMemory(\n      takenPhoto,\n      enteredTitle.toString(),\n      chosenMemoryType\n    );\n    history.length > 0 ? history.goBack() : history.replace(\"/good-memories\");\n  };\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/good-memories\" />\n          </IonButtons>\n          <IonTitle>Add New Memory</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonItem>\n                <IonLabel position=\"floating\">Memory Title</IonLabel>\n                <IonInput type=\"text\" ref={titleRef}></IonInput>\n              </IonItem>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonSelect\n                onIonChange={selectMemoryTypeHandler}\n                value={chosenMemoryType}\n              >\n                <IonSelectOption value=\"good\">Good Memory</IonSelectOption>\n                <IonSelectOption value=\"bad\">Bad Memory</IonSelectOption>\n              </IonSelect>\n            </IonCol>\n          </IonRow>\n          <IonRow className=\"ion-text-center\">\n            <IonCol>\n              <ImagePicker onImagePick={photoPickHandler} />\n            </IonCol>\n          </IonRow>\n          <IonRow className=\"ion-margin-top\">\n            <IonCol className=\"ion-text-center\">\n              <IonButton onClick={addMemoryHandler}>Add Memory</IonButton>\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default NewMemory;\n"],"sourceRoot":""}